import { pool, createPool } from "./db.js";
process.env.NTBA_FIX_350 = true;
import TelegramBot from 'node-telegram-bot-api';
import fs from 'fs';
import { firstMessage, secondMessage, takeSickDayMessage, confirmSickDayMessage } from './messages.js'
import { reconnectDatabase, checkDatabaseConnection } from './utils/database.js'
import { sickDayWord, removeMessage } from './utils/helpers.js'
import {
    getCountSickDay,
    takeSickDay,
    checkRegisterUser,
    cancelSickDay,
    addUser,
    getUsers } from './utils/commands.js'

// —Ç–æ–∫–µ–Ω –æ—Ç BotFather
const TOKEN = '7502069553:AAEmY4Y8NxyNusowJimPGCmg-3jFyDEa-zQ';

// —á–∞—Ç –∞–¥–º–∏–Ω–∞ (—Å–µ–π—á–∞—Å –î–∞—à–∞, –ø–æ—Ç–æ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å )
const ADMIN_CHAT_ID = '98150327'; // –ù–∏–∫–∞
// const ADMIN_CHAT_ID = '314147055'; // –î–∞—à–∞

getUsers()

// —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
export const bot = new TelegramBot(TOKEN, { polling: true });

// –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.on('polling_error', async (error) =>  {
    console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞:', error);
    await reconnectDatabase();
});

// –ù—É–∂–Ω–æ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
setInterval(async () => {
    await checkDatabaseConnection();
}, 24 * 60 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞

// –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...');

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç
bot.on('new_chat_members', async (msg) => {
    const chatId = msg.chat.id;
    const user = msg.from;

    const isRegistered = await checkRegisterUser(chatId)

    if (isRegistered) {
        bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!)`);
        return
    }

    bot.sendMessage(chatId, firstMessage, { parse_mode: "HTML", disable_web_page_preview: true });
    setTimeout(() => {
        bot.sendMessage(chatId, secondMessage, { parse_mode: "HTML", disable_web_page_preview: true });
    }, 500)

    bot.once('message', async (response) => {

        const newUser = {
            user_id: chatId,
            name: response.text,
            username: `@${user.username}`,
            chat_id: chatId,
        }

        await addUser(newUser)
        bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ! –¢—ã —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.`);
    });

});


// —É–∑–Ω–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Å–∏–∫–¥–µ–µ–≤
bot.onText(/\/getmysickdaycount/, async (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    let sickDayCount = 5

    removeMessage(chatId, messageId);

    const isRegistered = await checkRegisterUser(chatId)

    if (!isRegistered) {
        bot.sendMessage(chatId, `–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞).`);
    } else {
        sickDayCount = await getCountSickDay(chatId)
        bot.sendMessage(chatId, `${sickDayWord(5 - sickDayCount)}.`);
    }
});

bot.onText(/\/takemysickdaycount/, async (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;

    removeMessage(chatId, messageId);

    const isRegistered = await checkRegisterUser(chatId)

    if (!isRegistered) {
        bot.sendMessage(chatId, `–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞).`);
        return;
    }

    takeSickDay(chatId)
});

bot.onText(/\/cancelmysickday/, async (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;

    removeMessage(chatId, messageId);

    const isRegistered = await checkRegisterUser(chatId)

    if (!isRegistered) {
        bot.sendMessage(chatId, `–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞).`);
    } else {
        cancelSickDay(chatId)
    }
});

bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;

    removeMessage(chatId, messageId);

    const message = `
    –ü—Ä–∏–≤–µ—Ç, —è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–∏–∫–¥–µ–π –≤ HH.
    –î–ª—è —Ç–µ–±—è –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:
    /start - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.
    /getmysickdaycount - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ sick day —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å.
    /takemysickdaycount - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±—Ä–∞—Ç—å sick day —á–µ—Ä–µ–∑ –º–µ–Ω—è.
    /cancelmysickdaycount - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ sick day —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å.
    /help - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
  `
    bot.sendMessage(chatId, message);

});

// –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

bot.onText(/\/clearall/, async (msg) => {
    const chatId = msg.chat.id;

    if (ADMIN_CHAT_ID == chatId) {
        bot.sendMessage(chatId, `‚ÄºÔ∏è —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ —Å–∏–∫–¥–µ–∏ –¥–ª—è –≤—Å–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥. –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. 
—Ç–æ—á–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å‚ùì`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "confirm_clearall" }]
                ],
            },
        });
    } else {
        const photoStream = fs.createReadStream('./image/not-power.png');
        bot.sendPhoto(chatId, photoStream, {
            caption: "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!"
        });
    }
});

bot.onText(/\/showall/, async (msg) => {
    const chatId = msg.chat.id;
    if (ADMIN_CHAT_ID == chatId) {
        const SickDayUsers = await getUsers(chatId)
        const updatedUserList = SickDayUsers.map(u => `${u.name} (${u.username})`).join('\n');
        bot.sendMessage(ADMIN_CHAT_ID, `üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n${updatedUserList}`);
    } else {
        const photoStream = fs.createReadStream('./image/big-city.png');
        bot.sendPhoto(chatId, photoStream, {
            caption: "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!"
        });
    }
});

// –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
bot.on("callback_query", async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (data === "confirm_clearall") {
        if (ADMIN_CHAT_ID == chatId) {
            const query = `DELETE FROM SickDay`;

            try {
                await pool.query(query);
                bot.sendMessage(chatId, "–í—Å–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å —É –≤—Å–µ—Ö sickDayCount = 5!");
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err);
                bot.sendMessage(ADMIN_CHAT_ID, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ö—Ä–∏—á–∏—Ç–µ –∫–∞—Ä–∞—É–ª, —Ç–æ–≤–∞—Ä–∏—â —ç–π—á–∞—Ä :DD`);
            }
        } else {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.");
        }
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∫–Ω–æ–ø–∫–∏
        bot.answerCallbackQuery(query.id);
    }
});

// bot.onText(/\/start (.+)/, async (msg, match) => {
//     const param = match[1]; // –ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ /start
//     const chatId = msg.chat.id;
//     const user = msg.from;
//     const messageId = msg.message_id;
//
//     const isRegistered = await checkRegisterUser(chatId)
//
//     if (!isRegistered) {
//         bot.sendMessage(chatId, `–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞).`);
//         return;
//     }
//
//     removeMessage(chatId, messageId);
//     console.log('start: ', param)
//
//     if (param === 'takemysickdaycount') {
//         takeSickDay(chatId)
//     }
//     else if (param === 'cancelmysickday') {
//         cancelSickDay(chatId)
//     }
//     else {
//         bot.sendMessage(chatId, firstMessage, { parse_mode: "HTML", disable_web_page_preview: true });
//         setTimeout(() => {
//             bot.sendMessage(chatId, secondMessage, { parse_mode: "HTML", disable_web_page_preview: true });
//         }, 500)
//
//         bot.once('message', async (response) => {
//
//             const words = response.text.split(/\s+/); // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
//
//             if (words.length !== 3) {
//                 await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ /start –∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ. ");
//                 return;
//             }
//
//             const newUser = {
//                 user_id: chatId,
//                 name: response.text,
//                 username: `@${user.username}`,
//                 chat_id: chatId,
//             }
//
//             await addUser(newUser)
//
//             await bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ! –¢—ã —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.`);
//         });
//     }
// });

bot.onText(/\/start(?: (.+))?/, async (msg, match) => {
    const param = match[1]; // –ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ /start (–º–æ–∂–µ—Ç –±—ã—Ç—å undefined)
    const chatId = msg.chat.id;
    const user = msg.from;
    const messageId = msg.message_id;

    const isRegistered = await checkRegisterUser(chatId);

    if (!isRegistered) {
        bot.sendMessage(chatId, `–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞).`);
        return;
    }

    removeMessage(chatId, messageId);

    console.log('start: ', param);

    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –µ—Å—Ç—å
    if (param) {
        if (param === 'takemysickdaycount') {
            takeSickDay(chatId);
        } else if (param === 'cancelmysickday') {
            cancelSickDay(chatId);
        } else {
            bot.sendMessage(chatId, `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${param}`);
        }
    }
    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç
    else {
        const isRegistered = await checkRegisterUser(chatId)

        if (isRegistered) {
            bot.sendMessage(chatId, `–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞).`);
            return;
        }

        bot.sendMessage(chatId, firstMessage, { parse_mode: "HTML", disable_web_page_preview: true });
        setTimeout(() => {
            bot.sendMessage(chatId, secondMessage, { parse_mode: "HTML", disable_web_page_preview: true });
        }, 500)

        bot.once('message', async (response) => {

            const words = response.text.split(/\s+/); // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–æ–±–µ–ª–∞–º

            if (words.length !== 3) {
                await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ /start –∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ. ");
                return;
            }

            const newUser = {
                user_id: chatId,
                name: response.text,
                username: `@${user.username}`,
                chat_id: chatId,
            }

            await addUser(newUser)

            await bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ! –¢—ã —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.`);
        });
    }
});



