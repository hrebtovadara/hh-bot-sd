import pool from "./db.js";
process.env.NTBA_FIX_350 = true;
import TelegramBot from 'node-telegram-bot-api';
import fs from 'fs';
import { firstMessage, secondMessage, takeSickDayMessage, confirmSickDayMessage } from './messages.js'

// —Ç–æ–∫–µ–Ω –æ—Ç BotFather
const TOKEN = '7502069553:AAEmY4Y8NxyNusowJimPGCmg-3jFyDEa-zQ';

// —á–∞—Ç –∞–¥–º–∏–Ω–∞ (—Å–µ–π—á–∞—Å –ù–∏–∫–∞, –ø–æ—Ç–æ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å )
const ADMIN_CHAT_ID = '98150327'; // –ù–∏–∫–∞
// const ADMIN_CHAT_ID = '314147055'; // –î–∞—à–∞

getUsers()

// —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(TOKEN, { polling: true });

// –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞:', error);
});

// –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...');

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç
bot.on('new_chat_members', async (msg) => {
    const chatId = msg.chat.id;
    const user = msg.from;

    const isRegistered = await checkRegisterUser(chatId)

    if (isRegistered) {
        bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!)`);
        return
    }

    bot.sendMessage(chatId, firstMessage);
    setTimeout(() => {
        bot.sendMessage(chatId, secondMessage);
    }, 500)

    bot.once('message', async (response) => {

        const newUser = {
            user_id: chatId,
            name: response.text,
            username: `@${user.username}`,
            chat_id: chatId,
        }

        await addUser(newUser)
        bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ! –¢—ã —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.`);
    });

});

bot.onText('/start', async (msg) => {
    const chatId = msg.chat.id;
    const user = msg.from;

    const isRegistered = await checkRegisterUser(chatId)

    if (isRegistered) {
        bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!)`);
        getUsers()
        return
    }

    bot.sendMessage(chatId, firstMessage);
    setTimeout(() => {
        bot.sendMessage(chatId, secondMessage);
    }, 500)

    bot.once('message', async (response) => {

        const words = response.text.split(/\s+/); // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–æ–±–µ–ª–∞–º

        if (words.length !== 3) {
            await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ /start –∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ. ");
            return;
        }

        const newUser = {
            user_id: chatId,
            name: response.text,
            username: `@${user.username}`,
            chat_id: chatId,
        }

        await addUser(newUser)

        await bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ! –¢—ã —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.`);
    });

});

// —É–∑–Ω–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Å–∏–∫ –¥–µ–µ–≤
bot.onText(/\/getmysickdaycount/, async (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    let sickDayCount = 5

    try {
        await bot.deleteMessage(chatId, messageId);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }

    const isRegistered = checkRegisterUser(chatId)

    if (!isRegistered) {
        bot.sendMessage(chatId, `–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞).`);
    } else {
        sickDayCount = await getCountSickDay(chatId)
        bot.sendMessage(chatId, `${sickDayWord(5 - sickDayCount)}.`);
    }
});

bot.onText(/\/takemysickdaycount/, async (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;

    removeMessage(chatId, messageId);

    const isRegistered = checkRegisterUser(chatId)

    if (!isRegistered) {
        bot.sendMessage(chatId, `–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞).`);
        return;
    }

    const sickDayCount = await getCountSickDay(chatId)

    if (sickDayCount > 4) {
        bot.sendMessage(chatId, `–£ —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–∏–∫–¥–µ–µ–≤ –≤ —ç—Ç–æ–º –≥–æ–¥—É. –û—Ñ–æ—Ä–º–∏ –±–æ–ª—å–Ω–∏—á–Ω—ã–π –∏ –ø–æ–ø—Ä–∞–≤–ª—è–π—Å—è —Å–∫–æ—Ä–µ–µ!`);
    } else {
        takeSickDay(chatId)
    }
});

bot.onText(/\/cancelmysickday/, async (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;

    removeMessage(chatId, messageId);

    const isRegistered = checkRegisterUser(chatId)

    if (!isRegistered) {
        bot.sendMessage(chatId, `–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞).`);
    } else {
        const query = `
            SELECT *
            FROM SickDay
            WHERE user_id = (
                SELECT user_id FROM users WHERE user_id = $1
            )
            AND creation_date >= NOW() - INTERVAL '2 hours'
        `;
        const client = await pool.connect();

        try {
            const result = await client.query(query, [chatId]);
            const lastSickDay = result.rows.at(-1) || null

            if (!lastSickDay) {
                bot.sendMessage(chatId, `–£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ –≤–∑—è—Ç—ã—Ö —Å–∏–∫–¥–µ–µ–≤.`);
            } else {
                cancelSickDay(lastSickDay, chatId)
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err);
            bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ù–∞–ø–∏—à–∏ —ç–π—á–∞—Ä–∞–º.`);
        } finally {
            client.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
        }
    }
});

// –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

bot.onText(/\/clearall/, async (msg) => {
    const chatId = msg.chat.id;

    if (ADMIN_CHAT_ID == chatId) {
        const query = `DELETE FROM SickDay`;
        const client = await pool.connect();

        try {
            await client.query(query);
            bot.sendMessage(chatId, "–í—Å–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å —É –≤—Å–µ—Ö sickDayCount = 5! (*„Éªœâ„Éª)Ôæâ");

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err);
            bot.sendMessage(ADMIN_CHAT_ID, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ö—Ä–∏—á–∏—Ç–µ –∫–∞—Ä–∞—É–ª, —Ç–æ–≤–∞—Ä–∏—â —ç–π—á–∞—Ä :DD`);
        } finally {
            client.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
        }
    } else {
        const photoStream = fs.createReadStream('./image/not-power.png');
        bot.sendPhoto(chatId, photoStream, {
            caption: "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! „Éæ(=`œâ¬¥=)„Éé‚Äù"
        });
    }
});

bot.onText(/\/showall/, async (msg) => {
    const chatId = msg.chat.id;
    if (ADMIN_CHAT_ID == chatId) {
        const SickDayUsers = await getUsers(chatId)
        const updatedUserList = SickDayUsers.map(u => `${u.name} (${u.username})`).join('\n');
        bot.sendMessage(ADMIN_CHAT_ID, `üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n${updatedUserList}`);
    } else {
        const photoStream = fs.createReadStream('./image/big-city.png');
        bot.sendPhoto(chatId, photoStream, {
            caption: "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! „Éæ(=`œâ¬¥=)„Éé‚Äù"
        });
    }
});

bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;

    const message = `
    –ü—Ä–∏–≤–µ—Ç, —è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–∏–∫–¥–µ–π –≤ HH.
    –î–ª—è —Ç–µ–±—è –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:
    /start - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.
    /getmysickdaycount - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ sick day —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å.
    /takemysickdaycount - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±—Ä–∞—Ç—å sick day —á–µ—Ä–µ–∑ –º–µ–Ω—è.
    /cancelmysickdaycount - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ sick day —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å.
    /help - –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
  `
    bot.sendMessage(chatId, message);

});

async function removeMessage(chatId, messageId) {
    try {
        await bot.deleteMessage(chatId, messageId);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
}

async function addUser(value) {
    const query = `
        INSERT INTO users (user_id, name, username, chat_id)
        VALUES ($1, $2, $3, $4)
    `;

    const user = [
        value.user_id,
        value.name,
        value.username,
        value.chat_id,
    ];
    const client = await pool.connect();

    try {
        await client.query(query, user);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err);
        bot.sendMessage(value.chat_id, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ù–∞–ø–∏—à–∏ —ç–π—á–∞—Ä–∞–º.`);
    } finally {
        client.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
    }
}

async function getUsers(chatId) {
    const query = 'SELECT * FROM users'; // SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const client = await pool.connect();

    try {
        const result = await client.query(query); // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        console.log(result.rows)
        return result.rows; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err);
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ù–∞–ø–∏—à–∏ —ç–π—á–∞—Ä–∞–º.`);
    } finally {
        client.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
    }
}

async function checkRegisterUser(chatId){
    const query = `SELECT count(*) FROM users WHERE chat_id = $1`
    const client = await pool.connect();

    try {
        const result = await client.query(query, [chatId]); // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        return parseInt(result.rows[0].count) !== 0// –í–æ–∑–≤—Ä–∞—â–∞–µ–º
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err);
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ù–∞–ø–∏—à–∏ —ç–π—á–∞—Ä–∞–º.`);
    } finally {
        client.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
    }
}

async function cancelSickDay(sickDay, chatId){
    const query = `DELETE FROM SickDay WHERE sick_day_id = $1`
    const client = await pool.connect();

    try {
        await client.query(query, [sickDay.sick_day_id]);
        bot.sendMessage(chatId, `–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∑—è—Ç—ã–π —Å–∏–∫–¥–µ–π. –£–¥–∞—á–∏! —Å:`);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err);
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ù–∞–ø–∏—à–∏ —ç–π—á–∞—Ä–∞–º.`);
    } finally {
        client.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
    }
}

async function takeSickDay(chatId) {
    bot.sendMessage(chatId, takeSickDayMessage);

    bot.once('message', async (response) => {
        const dateRegex = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(\d{4})$/;
        if (dateRegex.test(response.text)) {
            const query = `
                INSERT INTO SickDay (user_id, creation_date, sickday_date)
                VALUES ($1, $2, $3)
            `;

            const [day, month, year] = response.text.split('.');
            const formattedDate = `${year}-${month}-${day}`;

            const sickDay = [
                chatId,
                new Date,
                formattedDate
            ];

            console.log(sickDay)
            const client = await pool.connect();


            try {
                await client.query(query, sickDay);
                bot.sendMessage(chatId, confirmSickDayMessage);
                sendInfoAdmin(chatId, response.text)
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err);
                bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ù–∞–ø–∏—à–∏ —ç–π—á–∞—Ä–∞–º.`);
            } finally {
                client.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
            }
        } else {
            bot.sendMessage(chatId, `–£–ø—Å, —Ç—ã –æ—à–∏–±—Å—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /takemysickdaycount`);
        }
    });
}

async function getCountSickDay(chatId) {
    const query = `
        SELECT count(*)
        FROM SickDay
        WHERE user_id = (
            SELECT user_id FROM users WHERE user_id = $1
        )
    `;
    const client = await pool.connect();


    try {
        const result = await client.query(query, [chatId]);
        const count = parseInt(result.rows[0].count);
        return count
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err);
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ù–∞–ø–∏—à–∏ —ç–π—á–∞—Ä–∞–º.`);
    } finally {
        client.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
    }
}

async function sendInfoAdmin(chatId, sickDay){
    const query = `
        SELECT *
        FROM users WHERE chat_id = $1
    `;
    const client = await pool.connect();

    try {
        const result = await client.query(query, [chatId]);
        const user = result.rows[0];
        const sickDayCount = await getCountSickDay(chatId)
        bot.sendMessage(ADMIN_CHAT_ID, `${user.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–∫–¥–µ–π ${sickDay}. –û—Å—Ç–∞—Ç–æ–∫ —Å–∏–∫–¥–µ–µ–≤: ${5 - sickDayCount}`);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err);
        bot.sendMessage(ADMIN_CHAT_ID, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ö—Ä–∏—á–∏—Ç–µ –∫–∞—Ä–∞—É–ª, —Ç–æ–≤–∞—Ä–∏—â —ç–π—á–∞—Ä :DD`);
    } finally {
        client.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
    }

}

function sickDayWord(num) {
    const wordVar = [
        `–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª—Å—è ${num} —Å–∏–∫–¥–µ–π`,
        `–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å ${num} —Å–∏–∫–¥–µ—è`,
        `–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å ${num} —Å–∏–∫–¥–µ–µ–≤`,
    ]
    return useNumWord().numWord(num, wordVar)
}

function useNumWord()  {
    const numWord = function (value, words) {
        value = Math.abs(value) % 100
        const num = value % 10
        if (value > 10 && value < 20) return words[2]
        if (num > 1 && num < 5) return words[1]
        if (num == 1) return words[0]
        return words[2]
    }

    return {
        numWord,
    }
}

